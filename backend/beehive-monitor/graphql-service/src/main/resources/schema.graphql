type BeehiveOutputJson {
  comment: String
  location: LocationOutputJson
  owner: OwnerOutputJson
  owner_uuid: String
  timestamp: String
  uuid: String
}

type LocationOutputJson {
  comment: String
  latitude: Float!
  longitude: Float!
  timestamp: String
  uuid: String
}

type MeasurementOutputJson {
  beehive_uuid: String
  owner_uuid: String
  timestamp: String
  type: String
  unit: String
  uuid: String
  value: Float!
}

"Mutation root"
type Mutation {
  create_beehive(input_json: BeehiveInputJson): BeehiveOutputJson
  create_owner(input_json: OwnerInputJson): OwnerOutputJson
}

type OwnerOutputJson {
  beehives: [BeehiveOutputJson]
  description: String
  email: String
  phone_number: String
  timestamp: String
  uuid: String
}

"Query root"
type Query {
  get_beehive(beehive_uuid: String, owner_uuid: String): BeehiveOutputJson
  get_beehives(owner_uuid: String): [BeehiveOutputJson]
  get_measurements(beehive_uuid: String, history_span: HistorySpan, owner_uuid: String, sensor_type: SensorType): [MeasurementOutputJson]
  get_owner(include_beehives: Boolean!, owner_uuid: String): OwnerOutputJson
}

"Subscription root"
type Subscription {
  on_measurement(beehive_uuid: String, owner_uuid: String, sensor_type: SensorType): MeasurementOutputJson
}

enum HistorySpan {
  HISTORY_DEFAULT
  HISTORY_LAST_5DAYS
  HISTORY_LAST_5HOURS
  HISTORY_LAST_5MINUTES
  HISTORY_LAST_5SECONDS
}

enum SensorType {
  SENSOR_DEFAULT
  SENSOR_HUMIDITY_INSIDE
  SENSOR_HUMIDITY_OUTSIDE
  SENSOR_TEMPERATURE_INSIDE
  SENSOR_TEMPERATURE_OUTSIDE
  SENSOR_WEIGHT
}

input BeehiveInputJson {
  comment: String
  location: LocationInputJson
  location_uuid: String
  owner_uuid: String!
  timestamp: String
}

input LocationInputJson {
  comment: String
  latitude: Float!
  longitude: Float!
}

input OwnerInputJson {
  description: String
  email: String!
  phone_number: String!
  timestamp: String
}
